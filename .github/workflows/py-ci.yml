
name: Py CI workflow

on:
  workflow_call:
    inputs:
      run_lint:
        required: false
        type: boolean
        default: true
      run_test:
        required: false
        type: boolean
        default: true
      run_docker:
        required: false
        type: boolean
        default: true
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  lint:
    if: ${{ inputs.run_lint }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        run: flake8 samples/python-templates || echo "⚠️ Lint warnings (non-blocking)"

  test:
    if: ${{ inputs.run_test }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r samples/python-templates/requirements.txt
          pip install pytest

      - name: Run tests
        run: pytest samples/python-templates/test_main.py

  dockerize:
    if: ${{ inputs.run_docker }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker secrets
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "❌ Docker credentials not found in GitHub secrets!"
            exit 1
          fi

        
      - name: Login to Docker Hub
        # if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from git tag
        id: get_version
        run: |
          # Get the latest tag or use a default if none exists
          GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          # Remove 'v' prefix if present
          VERSION=${GIT_TAG#v}
          # Extract major, minor, patch
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3 | cut -d- -f1)
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION (from tag $GIT_TAG)"

      - name: Set Docker image name
        id: image_name
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "name=${{ secrets.DOCKER_USERNAME }}/python-app" >> $GITHUB_OUTPUT
          else
            echo "name=demo/python-app" >> $GITHUB_OUTPUT
          fi

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image_name.outputs.name }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }}
            type=raw,value=${{ steps.get_version.outputs.major }}
            type=raw,value=latest
            type=sha,format=short

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: samples/python-templates
          push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Display image details
        run: |
          echo "🐳 Docker image built with the following tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr '\n' ', '
          echo ""
          echo "Version from git tag: ${{ steps.get_version.outputs.version }}"

      - name: Summary
        run: |
          echo "## 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ steps.image_name.outputs.name }}:${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags: ${{ steps.get_version.outputs.version }}, ${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }}, ${{ steps.get_version.outputs.major }}, latest" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "✅ Image pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View on Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/python-app/tags)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Image built locally only (Docker Hub credentials not provided)" >> $GITHUB_STEP_SUMMARY
          fi